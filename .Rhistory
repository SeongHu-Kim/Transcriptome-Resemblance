design = ~ condition)
# --- 4. Run DESeq2 Analysis ---
# This function performs normalization, dispersion estimation, and statistical testing
print("Running DESeq2 analysis...")
dds <- DESeq(dds)
print("DESeq2 analysis complete.")
# --- 5. Extract and Format Results ---
# Extract results for the comparison between 'Experimental' and 'Control'
# 'contrast' specifies the comparison: condition, numerator level, denominator level
# By default, levels are compared alphabetically, so 'Experimental' vs 'Control'
res <- results(dds, contrast=c("condition", "Experimental", "Control"))
# Order results by adjusted p-value (padj)
resOrdered <- res[order(res$padj),]
# Convert the results object to a data frame
resOrdered_df <- as.data.frame(resOrdered)
# Add gene IDs (which are the rownames) as a column
resOrdered_df <- resOrdered_df %>%
rownames_to_column(var = "gene_id")
# Merge with the original gene symbols
# Ensure gene_symbols has 'gene_id' as a column for merging
gene_symbols_df <- gene_symbols %>%
rownames_to_column(var = "gene_id")
# Perform the merge
results_final <- merge(gene_symbols_df, resOrdered_df, by = "gene_id", all.y = TRUE)
# Reorder columns for clarity
results_final <- results_final %>%
select(gene_id, gene_symbol, baseMean, log2FoldChange, lfcSE, stat, pvalue, padj)
# Display the first few rows of the final results table
print("First few rows of DESeq2 results:")
print(head(results_final))
# --- 6. Output Full Results ---
# Save the final results table to a CSV file
write.csv(results_final, file = output_file, row.names = FALSE)
print(paste("DESeq2 full results successfully saved to:", output_file))
# --- 7. Filter and Save Upregulated DEGs ---
print("Filtering for upregulated genes...")
# Define thresholds
lfc_threshold_up <- 0.58496 # log2(1.5)
padj_threshold <- 0.05
# Filter for upregulated genes (log2FC > threshold and padj < threshold)
# Also remove rows where padj or log2FoldChange is NA to avoid errors in sorting/filtering
up_degs <- results_final %>%
filter(!is.na(padj) & !is.na(log2FoldChange)) %>% # Remove NAs first
filter(log2FoldChange > lfc_threshold_up & padj < padj_threshold) %>%
mutate(abs_log2FoldChange = abs(log2FoldChange)) %>% # Add absolute LFC for sorting
arrange(desc(abs_log2FoldChange)) %>% # Sort by absolute LFC descending
select(-abs_log2FoldChange) # Remove the temporary column
# Save the upregulated DEGs to a CSV file
write.csv(up_degs, file = up_deg_file, row.names = FALSE)
print(paste("Upregulated DEGs (log2FC >", round(lfc_threshold_up, 3), ", padj <", padj_threshold, ") saved to:", up_deg_file))
print(paste("Number of upregulated DEGs:", nrow(up_degs)))
# --- 8. Filter and Save Downregulated DEGs ---
print("Filtering for downregulated genes...")
# Define threshold (negative for downregulation)
lfc_threshold_down <- -0.58496 # log2(1/1.5)
# Filter for downregulated genes (log2FC < threshold and padj < threshold)
# Also remove rows where padj or log2FoldChange is NA
down_degs <- results_final %>%
filter(!is.na(padj) & !is.na(log2FoldChange)) %>% # Remove NAs first
filter(log2FoldChange < lfc_threshold_down & padj < padj_threshold) %>%
mutate(abs_log2FoldChange = abs(log2FoldChange)) %>% # Add absolute LFC for sorting
arrange(desc(abs_log2FoldChange)) %>% # Sort by absolute LFC descending
select(-abs_log2FoldChange) # Remove the temporary column
# Save the downregulated DEGs to a CSV file
write.csv(down_degs, file = down_deg_file, row.names = FALSE)
print(paste("Downregulated DEGs (log2FC <", round(lfc_threshold_down, 3), ", padj <", padj_threshold, ") saved to:", down_deg_file))
print(paste("Number of downregulated DEGs:", nrow(down_degs)))
# --- Optional: Save Normalized Counts ---
# normalized_counts <- counts(dds, normalized=TRUE)
# normalized_counts_df <- as.data.frame(normalized_counts) %>%
#   rownames_to_column(var = "gene_id") %>%
#   merge(gene_symbols_df, by = "gene_id") %>%
#   select(gene_id, gene_symbol, everything()) # Reorder columns
# write.csv(normalized_counts_df, file = "../public/DESeq2_normalized_counts.csv", row.names = FALSE)
# print("Normalized counts saved to ../public/DESeq2_normalized_counts.csv")
# --- Load Required Libraries ---
# Load DESeq2 for differential expression analysis
# Load tidyverse for data manipulation (specifically dplyr and readr)
library(DESeq2)
library(tidyverse)
# --- Set File Paths ---
# Define the input file path for the gene count matrix
input_file <- "../public/GeneCountMatrix_filtered.csv"
# Define the output file path for the full DESeq2 results
output_file <- "../public/DESeq2_results.csv"
# Define output file paths for filtered differentially expressed genes (DEGs)
up_deg_file <- "../public/UpDEG.csv"
down_deg_file <- "../public/DownDEG.csv"
# --- 1. Import Data ---
# Read the gene count matrix from the CSV file
# 'check.names=FALSE' prevents R from modifying column names (e.g., replacing '-' with '.')
count_data_raw <- read.csv(input_file, header = TRUE, row.names = "gene_id", check.names = FALSE)
# Display the first few rows and dimensions to verify import
print("Raw count data dimensions:")
print(dim(count_data_raw))
print("First few rows of raw count data:")
print(head(count_data_raw))
# --- 2. Prepare Data for DESeq2 ---
# Separate gene symbols (if needed later, though not directly used by DESeq2)
gene_symbols <- count_data_raw %>% select(gene_symbol)
count_matrix_raw <- count_data_raw %>% select(-gene_symbol) # Keep only count columns
# DESeq2 requires integer counts. Round the count data to the nearest integer.
count_matrix <- round(count_matrix_raw)
# Display the first few rows of the rounded count matrix
print("First few rows of rounded count matrix:")
print(head(count_matrix))
# Create the metadata (colData) describing the samples
# Extract sample names from the column names of the count matrix
sample_names <- colnames(count_matrix)
# Determine the condition (e.g., 'Control' or 'Experimental') for each sample
# This assumes column names clearly indicate the group (e.g., start with 'Control_' or 'Experimental_')
conditions <- sub("_R\\d+", "", sample_names) # Remove replicate number (e.g., _R1)
colData <- data.frame(row.names = sample_names, condition = factor(conditions))
# Ensure the order of rows in colData matches the order of columns in count_matrix
if (!all(rownames(colData) == colnames(count_matrix))) {
stop("Mismatch between column names of count matrix and row names of metadata!")
}
print("Sample Metadata (colData):")
print(colData)
# --- 3. Create DESeqDataSet Object ---
# Construct the DESeqDataSet object from the count matrix and metadata
# The design formula (~ condition) tells DESeq2 to model counts based on the 'condition' variable
dds <- DESeqDataSetFromMatrix(countData = count_matrix,
colData = colData,
design = ~ condition)
# --- 4. Run DESeq2 Analysis ---
# This function performs normalization, dispersion estimation, and statistical testing
print("Running DESeq2 analysis...")
dds <- DESeq(dds)
print("DESeq2 analysis complete.")
# --- 5. Extract and Format Results ---
# Extract results for the comparison between 'Experimental' and 'Control'
# 'contrast' specifies the comparison: condition, numerator level, denominator level
# By default, levels are compared alphabetically, so 'Experimental' vs 'Control'
res <- results(dds, contrast=c("condition", "Experimental", "Control"))
# Order results by adjusted p-value (padj)
resOrdered <- res[order(res$padj),]
# Convert the results object to a data frame
resOrdered_df <- as.data.frame(resOrdered)
# Add gene IDs (which are the rownames) as a column
resOrdered_df <- resOrdered_df %>%
rownames_to_column(var = "gene_id")
# Merge with the original gene symbols
# Ensure gene_symbols has 'gene_id' as a column for merging
gene_symbols_df <- gene_symbols %>%
rownames_to_column(var = "gene_id")
# Perform the merge
results_final <- merge(gene_symbols_df, resOrdered_df, by = "gene_id", all.y = TRUE)
# Reorder columns for clarity
results_final <- results_final %>%
select(gene_id, gene_symbol, baseMean, log2FoldChange, lfcSE, stat, pvalue, padj)
# Display the first few rows of the final results table
print("First few rows of DESeq2 results:")
print(head(results_final))
# --- 6. Output Full Results ---
# Save the final results table to a CSV file
write.csv(results_final, file = output_file, row.names = FALSE)
print(paste("DESeq2 full results successfully saved to:", output_file))
# --- 7. Filter and Save Upregulated DEGs ---
print("Filtering for upregulated genes...")
# Define thresholds
lfc_threshold_up <- 0.58496 # log2(1.5)
padj_threshold <- 0.05
# Filter for upregulated genes (log2FC > threshold and padj < threshold)
# Also remove rows where padj or log2FoldChange is NA to avoid errors in sorting/filtering
up_degs <- results_final %>%
filter(!is.na(padj) & !is.na(log2FoldChange)) %>% # Remove NAs first
filter(log2FoldChange > lfc_threshold_up & padj < padj_threshold) %>%
mutate(abs_log2FoldChange = abs(log2FoldChange)) %>% # Add absolute LFC for sorting
arrange(desc(abs_log2FoldChange)) %>% # Sort by absolute LFC descending
select(-abs_log2FoldChange) # Remove the temporary column
# Save the upregulated DEGs to a CSV file
write.csv(up_degs, file = up_deg_file, row.names = FALSE)
print(paste("Upregulated DEGs (log2FC >", round(lfc_threshold_up, 3), ", padj <", padj_threshold, ") saved to:", up_deg_file))
print(paste("Number of upregulated DEGs:", nrow(up_degs)))
# --- 8. Filter and Save Downregulated DEGs ---
print("Filtering for downregulated genes...")
# Define threshold (negative for downregulation)
lfc_threshold_down <- -0.58496 # log2(1/1.5)
# Filter for downregulated genes (log2FC < threshold and padj < threshold)
# Also remove rows where padj or log2FoldChange is NA
down_degs <- results_final %>%
filter(!is.na(padj) & !is.na(log2FoldChange)) %>% # Remove NAs first
filter(log2FoldChange < lfc_threshold_down & padj < padj_threshold) %>%
mutate(abs_log2FoldChange = abs(log2FoldChange)) %>% # Add absolute LFC for sorting
arrange(desc(abs_log2FoldChange)) %>% # Sort by absolute LFC descending
select(-abs_log2FoldChange) # Remove the temporary column
# Save the downregulated DEGs to a CSV file
write.csv(down_degs, file = down_deg_file, row.names = FALSE)
print(paste("Downregulated DEGs (log2FC <", round(lfc_threshold_down, 3), ", padj <", padj_threshold, ") saved to:", down_deg_file))
print(paste("Number of downregulated DEGs:", nrow(down_degs)))
# --- Optional: Save Normalized Counts ---
normalized_counts <- counts(dds, normalized=TRUE)
normalized_counts_df <- as.data.frame(normalized_counts) %>%
rownames_to_column(var = "gene_id") %>%
merge(gene_symbols_df, by = "gene_id") %>%
select(gene_id, gene_symbol, everything()) # Reorder columns
write.csv(normalized_counts_df, file = "../public/DESeq2_normalized_counts.csv", row.names = FALSE)
print("Normalized counts saved to ../public/DESeq2_normalized_counts.csv")
# Install necessary packages if you haven't already
# install.packages("ggplot2")
# install.packages("dplyr")
# Load required libraries
library(ggplot2)
library(dplyr)
# --- Configuration ---
# Define input file path
input_file <- "../public/DESeq2_results.csv"
# Define output file path
output_file <- "../public/volcano_plot.jpg"
# Define thresholds
padj_threshold <- 0.05
# log2FoldChange threshold (equivalent to fold change of 1.5)
lfc_threshold <- 0.58496
# --- Data Loading and Preparation ---
# Check if the input file exists
if (!file.exists(input_file)) {
stop(paste("Error: Input file not found at", input_file))
}
# Read the DESeq2 results CSV file
# Using tryCatch to handle potential errors during file reading
deseq_results <- tryCatch({
read.csv(input_file)
}, error = function(e) {
stop(paste("Error reading CSV file:", e$message))
})
# Check if essential columns exist
required_cols <- c("log2FoldChange", "padj")
if (!all(required_cols %in% names(deseq_results))) {
stop(paste("Error: Input CSV must contain columns:", paste(required_cols, collapse=", ")))
}
# Add a column to classify genes based on significance and fold change
# Handle potential NA values in padj - replace NA with 1 (least significant)
# Handle potential NA values in log2FoldChange - replace NA with 0
deseq_results <- deseq_results %>%
mutate(
padj = ifelse(is.na(padj), 1, padj), # Replace NA padj with 1
log2FoldChange = ifelse(is.na(log2FoldChange), 0, log2FoldChange), # Replace NA log2FC with 0
gene_status = case_when(
padj < padj_threshold & log2FoldChange > lfc_threshold  ~ "Upregulated",
padj < padj_threshold & log2FoldChange < -lfc_threshold ~ "Downregulated",
TRUE                                                    ~ "Not Significant" # Default case
),
# Ensure gene_status is a factor for consistent coloring
gene_status = factor(gene_status, levels = c("Upregulated", "Downregulated", "Not Significant"))
)
# --- Volcano Plot Creation ---
# Create the volcano plot using ggplot2
volcano_plot <- ggplot(deseq_results, aes(x = log2FoldChange, y = -log10(padj), color = gene_status)) +
geom_point(alpha = 0.6, size = 1.5) + # Add points with some transparency
scale_color_manual(values = c("Upregulated" = "red",
"Downregulated" = "blue",
"Not Significant" = "grey")) + # Define colors
theme_minimal(base_size = 14) + # Use a minimal theme
labs(
title = "Volcano Plot of Differential Gene Expression",
x = expression(Log[2]~"Fold Change"), # Label x-axis
y = expression(-Log[10]~"Adjusted p-value"), # Label y-axis
color = "Gene Status" # Legend title
) +
# Add horizontal line for padj threshold
geom_hline(yintercept = -log10(padj_threshold), linetype = "dashed", color = "black", linewidth = 0.5) +
# Add vertical lines for log2FoldChange thresholds
geom_vline(xintercept = c(-lfc_threshold, lfc_threshold), linetype = "dashed", color = "black", linewidth = 0.5) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"), # Center and bold title
legend.position = "bottom", # Place legend at the bottom
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.border = element_rect(colour = "black", fill=NA, linewidth=0.5) # Add border
)
# Print the plot to the R graphics device (optional, good for interactive sessions)
# print(volcano_plot)
# --- Save Plot ---
# Save the plot to the specified file path
# Using tryCatch to handle potential errors during saving
tryCatch({
ggsave(output_file, plot = volcano_plot, width = 8, height = 6, dpi = 300, device = "jpeg")
print(paste("Volcano plot successfully saved to:", output_file))
}, error = function(e) {
warning(paste("Warning: Could not save the plot.", e$message))
# Attempt to save in the current working directory if ../public fails
alt_output_file <- "volcano_plot.jpg"
tryCatch({
ggsave(alt_output_file, plot = volcano_plot, width = 8, height = 6, dpi = 300, device = "jpeg")
print(paste("Plot saved to current working directory instead:", alt_output_file))
}, error = function(e_alt) {
stop(paste("Error: Failed to save plot to both specified and current directory.", e_alt$message))
})
})
# Clean up variables (optional)
# rm(deseq_results, volcano_plot, input_file, output_file, padj_threshold, lfc_threshold, required_cols)
# Install necessary packages if you haven't already
# install.packages("ggplot2")
# install.packages("dplyr")
# Load required libraries
library(ggplot2)
library(dplyr)
# --- Configuration ---
# Define input file path
input_file <- "../public/DESeq2_results.csv"
# Define output file path
output_file <- "../public/volcano_plot_annotated.jpg" # Changed output filename slightly
# Define thresholds
padj_threshold <- 0.05
# log2FoldChange threshold (equivalent to fold change of 1.5)
lfc_threshold <- 0.58496
# --- Data Loading and Preparation ---
# Check if the input file exists
if (!file.exists(input_file)) {
stop(paste("Error: Input file not found at", input_file))
}
# Read the DESeq2 results CSV file
# Using tryCatch to handle potential errors during file reading
deseq_results <- tryCatch({
read.csv(input_file)
}, error = function(e) {
stop(paste("Error reading CSV file:", e$message))
})
# Check if essential columns exist
required_cols <- c("log2FoldChange", "padj", "gene_symbol") # Added gene_symbol for potential future labeling
if (!all(required_cols %in% names(deseq_results))) {
# Check if at least log2FoldChange and padj exist
minimal_cols <- c("log2FoldChange", "padj")
if (!all(minimal_cols %in% names(deseq_results))) {
stop(paste("Error: Input CSV must contain columns:", paste(minimal_cols, collapse=", ")))
} else {
warning("Warning: 'gene_symbol' column not found. It's recommended for potential gene labeling.")
}
}
# Add a column to classify genes based on significance and fold change
# Handle potential NA values in padj - replace NA with 1 (least significant)
# Handle potential NA values in log2FoldChange - replace NA with 0
deseq_results <- deseq_results %>%
# Keep original values for filtering if needed, create new ones for plotting
mutate(
plot_padj = ifelse(is.na(padj) | padj == 0, 1e-300, padj), # Replace NA or 0 padj with a very small number for -log10 plot
plot_log2FC = ifelse(is.na(log2FoldChange), 0, log2FoldChange), # Replace NA log2FC with 0
gene_status = case_when(
padj < padj_threshold & log2FoldChange > lfc_threshold  ~ "Upregulated",
padj < padj_threshold & log2FoldChange < -lfc_threshold ~ "Downregulated",
TRUE                                                    ~ "Not Significant" # Default case
),
# Ensure gene_status is a factor for consistent coloring and counting
gene_status = factor(gene_status, levels = c("Upregulated", "Downregulated", "Not Significant"))
)
# --- Calculate Counts ---
gene_counts <- deseq_results %>%
count(gene_status) %>%
# Ensure all levels are present, even if count is 0
tidyr::complete(gene_status, fill = list(n = 0))
# Extract counts for annotation
n_up <- gene_counts$n[gene_counts$gene_status == "Upregulated"]
n_down <- gene_counts$n[gene_counts$gene_status == "Downregulated"]
n_ns <- gene_counts$n[gene_counts$gene_status == "Not Significant"]
# --- Volcano Plot Creation ---
# Determine plot limits for placing annotations
x_range <- range(deseq_results$plot_log2FC, na.rm = TRUE)
y_range <- range(-log10(deseq_results$plot_padj), na.rm = TRUE)
# Create the volcano plot using ggplot2
volcano_plot <- ggplot(deseq_results, aes(x = plot_log2FC, y = -log10(plot_padj), color = gene_status)) +
geom_point(alpha = 0.6, size = 1.5) + # Add points with some transparency
scale_color_manual(values = c("Upregulated" = "red",
"Downregulated" = "blue",
"Not Significant" = "grey")) + # Define colors
theme_minimal(base_size = 14) + # Use a minimal theme
labs(
title = "Volcano Plot of Differential Gene Expression",
x = expression(Log[2]~"Fold Change"), # Label x-axis
y = expression(-Log[10]~"Adjusted p-value"), # Label y-axis
color = "Gene Status" # Legend title
) +
# Add horizontal line for padj threshold
geom_hline(yintercept = -log10(padj_threshold), linetype = "dashed", color = "black", linewidth = 0.5) +
# Add vertical lines for log2FoldChange thresholds
geom_vline(xintercept = c(-lfc_threshold, lfc_threshold), linetype = "dashed", color = "black", linewidth = 0.5) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"), # Center and bold title
legend.position = "bottom", # Place legend at the bottom
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.border = element_rect(colour = "black", fill=NA, linewidth=0.5) # Add border
) +
# --- Add Annotations ---
# Add Count Annotations
annotate("text", x = x_range[1] * 0.95, y = y_range[2] * 0.95, # Top-left corner
label = paste("Downregulated:", n_down), hjust = 0, vjust = 1, size = 4, color = "blue") +
annotate("text", x = x_range[2] * 0.95, y = y_range[2] * 0.95, # Top-right corner
label = paste("Upregulated:", n_up), hjust = 1, vjust = 1, size = 4, color = "red") +
annotate("text", x = 0, y = y_range[1] + (y_range[2]-y_range[1])*0.05, # Bottom-center
label = paste("Not Significant:", n_ns), hjust = 0.5, vjust = 0, size = 4, color = "grey40") +
# Add Threshold Annotations
annotate("text", x = x_range[2] * 0.95, y = -log10(padj_threshold),
label = paste("padj =", padj_threshold), hjust = 1, vjust = -0.5, size = 3.5, color = "black") + # padj line label
annotate("text", x = lfc_threshold, y = y_range[1] + (y_range[2]-y_range[1])*0.02,
label = paste0("+", round(lfc_threshold, 2)), vjust = 0, hjust = -0.2, size = 3.5, color = "black", angle=90) + # Positive LFC line label
annotate("text", x = -lfc_threshold, y = y_range[1] + (y_range[2]-y_range[1])*0.02,
label = round(-lfc_threshold, 2), vjust = 0, hjust = -0.2, size = 3.5, color = "black", angle=90) # Negative LFC line label
# Print the plot to the R graphics device (optional, good for interactive sessions)
# print(volcano_plot)
# --- Save Plot ---
# Save the plot to the specified file path
# Using tryCatch to handle potential errors during saving
tryCatch({
ggsave(output_file, plot = volcano_plot, width = 9, height = 7, dpi = 300, device = "jpeg") # Adjusted size slightly for annotations
print(paste("Annotated volcano plot successfully saved to:", output_file))
}, error = function(e) {
warning(paste("Warning: Could not save the plot to specified path.", e$message))
# Attempt to save in the current working directory if ../public fails
alt_output_file <- "volcano_plot_annotated.jpg"
tryCatch({
ggsave(alt_output_file, plot = volcano_plot, width = 9, height = 7, dpi = 300, device = "jpeg")
print(paste("Plot saved to current working directory instead:", alt_output_file))
}, error = function(e_alt) {
stop(paste("Error: Failed to save plot to both specified and current directory.", e_alt$message))
})
})
# Clean up variables (optional)
# rm(deseq_results, volcano_plot, input_file, output_file, padj_threshold, lfc_threshold, required_cols, minimal_cols, gene_counts, n_up, n_down, n_ns, x_range, y_range)
# Install necessary packages if you haven't already
# install.packages("ggplot2")
# install.packages("dplyr")
# Load required libraries
library(ggplot2)
library(dplyr)
# --- Configuration ---
# Define input file path
input_file <- "../public/DESeq2_results.csv"
# Define output file path
output_file <- "../public/volcano_plot.jpg"
# Define thresholds
padj_threshold <- 0.05
# log2FoldChange threshold (equivalent to fold change of 1.5)
lfc_threshold <- 0.58496
# --- Data Loading and Preparation ---
# Check if the input file exists
if (!file.exists(input_file)) {
stop(paste("Error: Input file not found at", input_file))
}
# Read the DESeq2 results CSV file
# Using tryCatch to handle potential errors during file reading
deseq_results <- tryCatch({
read.csv(input_file)
}, error = function(e) {
stop(paste("Error reading CSV file:", e$message))
})
# Check if essential columns exist
required_cols <- c("log2FoldChange", "padj")
if (!all(required_cols %in% names(deseq_results))) {
stop(paste("Error: Input CSV must contain columns:", paste(required_cols, collapse=", ")))
}
# Add a column to classify genes based on significance and fold change
# Handle potential NA values in padj - replace NA with 1 (least significant)
# Handle potential NA values in log2FoldChange - replace NA with 0
deseq_results <- deseq_results %>%
mutate(
padj = ifelse(is.na(padj), 1, padj), # Replace NA padj with 1
log2FoldChange = ifelse(is.na(log2FoldChange), 0, log2FoldChange), # Replace NA log2FC with 0
gene_status = case_when(
padj < padj_threshold & log2FoldChange > lfc_threshold  ~ "Upregulated",
padj < padj_threshold & log2FoldChange < -lfc_threshold ~ "Downregulated",
TRUE                                                    ~ "Not Significant" # Default case
),
# Ensure gene_status is a factor for consistent coloring
gene_status = factor(gene_status, levels = c("Upregulated", "Downregulated", "Not Significant"))
)
# --- Volcano Plot Creation ---
# Create the volcano plot using ggplot2
volcano_plot <- ggplot(deseq_results, aes(x = log2FoldChange, y = -log10(padj), color = gene_status)) +
geom_point(alpha = 0.6, size = 1.5) + # Add points with some transparency
scale_color_manual(values = c("Upregulated" = "red",
"Downregulated" = "blue",
"Not Significant" = "grey")) + # Define colors
theme_minimal(base_size = 14) + # Use a minimal theme
labs(
title = "Volcano Plot of Differential Gene Expression",
x = expression(Log[2]~"Fold Change"), # Label x-axis
y = expression(-Log[10]~"Adjusted p-value"), # Label y-axis
color = "Gene Status" # Legend title
) +
# Add horizontal line for padj threshold
geom_hline(yintercept = -log10(padj_threshold), linetype = "dashed", color = "black", linewidth = 0.5) +
# Add vertical lines for log2FoldChange thresholds
geom_vline(xintercept = c(-lfc_threshold, lfc_threshold), linetype = "dashed", color = "black", linewidth = 0.5) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"), # Center and bold title
legend.position = "bottom", # Place legend at the bottom
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.border = element_rect(colour = "black", fill=NA, linewidth=0.5) # Add border
)
# Print the plot to the R graphics device (optional, good for interactive sessions)
# print(volcano_plot)
# --- Save Plot ---
# Save the plot to the specified file path
# Using tryCatch to handle potential errors during saving
tryCatch({
ggsave(output_file, plot = volcano_plot, width = 8, height = 6, dpi = 300, device = "jpeg")
print(paste("Volcano plot successfully saved to:", output_file))
}, error = function(e) {
warning(paste("Warning: Could not save the plot.", e$message))
# Attempt to save in the current working directory if ../public fails
alt_output_file <- "volcano_plot.jpg"
tryCatch({
ggsave(alt_output_file, plot = volcano_plot, width = 8, height = 6, dpi = 300, device = "jpeg")
print(paste("Plot saved to current working directory instead:", alt_output_file))
}, error = function(e_alt) {
stop(paste("Error: Failed to save plot to both specified and current directory.", e_alt$message))
})
})
# Clean up variables (optional)
# rm(deseq_results, volcano_plot, input_file, output_file, padj_threshold, lfc_threshold, required_cols)
